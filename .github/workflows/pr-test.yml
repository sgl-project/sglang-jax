name: PR Test

on:
  push:
    branches:
      - main
      - 'epic/*'
    paths:
      - "python/**"
      - "scripts/**"
      - "test/**"
      - ".github/workflows/pr-test.yml"
  pull_request:
    branches:
      - main
      - 'epic/*'
    paths:
      - "python/**"
      - "scripts/**"
      - "test/**"
      - ".github/workflows/pr-test.yml"

concurrency:
  group: pr-test-${{ github.ref }}
  cancel-in-progress: true

jobs:

  e2e-test-1-tpu:
    if: github.event.pull_request.draft == false
    runs-on: self-hosted
    strategy:
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup environment
        uses: ./.github/actions/setup_environment
        with:
          accelerator: tpu-v6e-1
          test_type: e2e
          skypilot_endpoint: ${{ secrets.SKYPILOT_ENDPOINT }}
          username: ${{ secrets.USERNAME }}
          git_token: ${{ secrets.GIT_TOKEN }}
      - name: Run test
        timeout-minutes: 30
        run: |
          source ~/sky/bin/activate
          CLUSTER_NAME=$(bash scripts/get_cluster_name.sh tpu-v6e-1 ${{ github.ref }} e2e)
          sky exec "$CLUSTER_NAME" -- 'set -e; cd sglang-jax; uv run python test/srt/run_suite.py --suite per-commit-tpu-v6e-1'

  e2e-test-4-tpu:
    if: github.event.pull_request.draft == false
    runs-on: self-hosted
    strategy:
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup environment
        uses: ./.github/actions/setup_environment
        with:
          accelerator: tpu-v6e-4
          test_type: e2e
          skypilot_endpoint: ${{ secrets.SKYPILOT_ENDPOINT }}
          username: ${{ secrets.USERNAME }}
          git_token: ${{ secrets.GIT_TOKEN }}
      - name: Run test
        timeout-minutes: 120
        run: |
          source ~/sky/bin/activate
          CLUSTER_NAME=$(bash scripts/get_cluster_name.sh tpu-v6e-4 ${{ github.ref }} e2e)
          sky exec "$CLUSTER_NAME" -- 'set -e; cd sglang-jax; uv run python test/srt/run_suite.py --suite per-commit-tpu-v6e-4'

  performance-test-1-tpu:
    if: github.event.pull_request.draft == false
    runs-on: self-hosted
    strategy:
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup environment
        uses: ./.github/actions/setup_environment
        with:
          accelerator: tpu-v6e-1
          test_type: performance
          skypilot_endpoint: ${{ secrets.SKYPILOT_ENDPOINT }}
          username: ${{ secrets.USERNAME }}
          git_token: ${{ secrets.GIT_TOKEN }}
      - name: Benchmark single latency
        timeout-minutes: 30
        run: |
          source ~/sky/bin/activate
          CLUSTER_NAME=$(bash scripts/get_cluster_name.sh tpu-v6e-1 ${{ github.ref }} performance)
          sky exec "$CLUSTER_NAME" -- 'set -e; cd sglang-jax/test/srt; uv run python -m unittest test_bench_one_batch.TestBenchOneBatch.test_bs1_default'

      # - name: Benchmark online latency
      #   timeout-minutes: 10
      #   run: |
      #     source ~/sky/bin/activate
      #     CLUSTER_NAME=$(bash scripts/get_cluster_name.sh tpu-v6e-1 ${{ github.ref }} performance)
      #     sky exec "$CLUSTER_NAME" -- 'set -e; cd sglang-jax/test/srt; python3 -m unittest test_bench_serving.TestBenchServing.test_online_latency_default'

      # - name: Benchmark offline throughput (w/o RadixAttention)
      #   timeout-minutes: 10
      #   run: |
      #     source ~/sky/bin/activate
      #     CLUSTER_NAME=$(bash scripts/get_cluster_name.sh tpu-v6e-1 ${{ github.ref }} performance)
      #     sky exec "$CLUSTER_NAME" -- 'set -e; cd sglang-jax/test/srt; python3 -m unittest test_bench_serving.TestBenchServing.test_offline_throughput_without_radix_cache'

      # - name: Benchmark offline throughput (Non-streaming, small batch size)
      #   timeout-minutes: 10
      #   run: |
      #     source ~/sky/bin/activate
      #     CLUSTER_NAME=$(bash scripts/get_cluster_name.sh tpu-v6e-1 ${{ github.ref }} performance)
      #     sky exec "$CLUSTER_NAME" -- 'set -e; cd sglang-jax/test/srt; python3 -m unittest test_bench_serving.TestBenchServing.test_offline_throughput_non_stream_small_batch_size'

      # - name: Benchmark offline throughput
      #   timeout-minutes: 10
      #   run: |
      #     source ~/sky/bin/activate
      #     CLUSTER_NAME=$(bash scripts/get_cluster_name.sh tpu-v6e-1 ${{ github.ref }} performance)
      #     sky exec "$CLUSTER_NAME" -- 'set -e; cd sglang-jax/test/srt; python3 -m unittest test_bench_serving.TestBenchServing.test_offline_throughput_default'


  performance-test-4-tpu:
    if: github.event.pull_request.draft == false
    runs-on: self-hosted
    strategy:
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

  accuracy-test-1-tpu:
    if: github.event.pull_request.draft == false
    runs-on: self-hosted
    strategy:
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup environment
        uses: ./.github/actions/setup_environment
        with:
          accelerator: tpu-v6e-1
          test_type: accuracy
          skypilot_endpoint: ${{ secrets.SKYPILOT_ENDPOINT }}
          username: ${{ secrets.USERNAME }}
          git_token: ${{ secrets.GIT_TOKEN }}
      - name: Install dependencies
        run: |
          source ~/sky/bin/activate
          CLUSTER_NAME=$(bash scripts/get_cluster_name.sh tpu-v6e-1 ${{ github.ref }} accuracy)
          sky exec "$CLUSTER_NAME" -- 'set -e; if [ ! -d "human-eval" ] || [ -z "$(ls -A human-eval)" ]; then git clone https://github.com/merrymercy/human-eval.git; fi; cd human-eval; uv pip install -e .'

      - name: Evaluate accuracy
        timeout-minutes: 60
        run: |
          source ~/sky/bin/activate
          CLUSTER_NAME=$(bash scripts/get_cluster_name.sh tpu-v6e-1 ${{ github.ref }} accuracy)
          sky exec "$CLUSTER_NAME" -- 'set -e; cd sglang-jax/test/srt; python3 test_eval_accuracy_large.py'

  pr-test-finish:
    needs: [
      e2e-test-4-tpu,
    ]
    runs-on: self-hosted
    steps:
      - name: Check all dependent job statuses
        run: |
          results=(${{ join(needs.*.result, ' ') }})
          for result in "${results[@]}"; do
            if [ "$result" = "failure" ] || [ "$result" = "cancelled" ]; then
              echo "Job failed with result: $result"
              exit 1
            fi
          done
          echo "All jobs completed successfully"
          exit 0
